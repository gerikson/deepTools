name: Test
on: [push, pull_request]

defaults:
  run:
    shell: bash -l {0}

jobs:
  check_versions_matches:
    name: Check deeptools version matches galaxy tools
    runs-on: ubuntu-latest
    if: github.base_ref == 'master'
    steps:
    - uses: actions/checkout@v4
    - name: Check path
      run: find /home/runner/work/deepTools/deepTools -name "pyproject.toml"
    - name: Get Version of Deeptools
      run: echo "deeptools_version=$(grep "version" /home/runner/work/deepTools/deepTools/pyproject.toml | awk '{print substr($NF, 2, length($NF) - 2)}')" >> $GITHUB_ENV
    - name: Get Version of Galaxy tools
      run: echo "galaxy_deeptools_version=$(grep "token.*TOOL_VERSION" /home/runner/work/deepTools/deepTools/galaxy/wrapper/deepTools_macros.xml | awk -F '>|<' '{print $3}')" >> $GITHUB_ENV
    - name: Versions
      run: | 
        echo deeptools version=${deeptools_version}
        echo deeptools version in galaxy=${galaxy_deeptools_version}
    - name: Fail PR if versions not matching
      run: |
        if [ -z $galaxy_deeptools_version ]; then
          echo "galaxy_deeptools_version not defined change the github action"
          exit 1
        fi
        if [ -z $deeptools_version ]; then
          echo "deeptools_version not defined change the github action"
          exit 1
        fi
        if [ "$galaxy_deeptools_version" != "$deeptools_version" ]; then
          echo "versions do not match"
          exit 1
        fi
  build-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9','3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Install maturin
        run: pip install maturin
      - name: Build with maturin
        run: maturin develop
      - name: pip install
        run: |
          pip install .[actions]
      - name: Test deepTools
        run: |
          pytest -v
      - name: Build wheel
        run: |
          python -m build
      - name: Test wheel
        run: |
          pip install dist/*whl
  build-osx:
    name: Test on OSX
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' 
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install maturin
      run: pip install maturin
    - name: Build with maturin
      run: maturin develop
    - name: pip install
      run: |
        pip install .[actions]
    - name: Test deepTools
      run: |
        pytest -v
